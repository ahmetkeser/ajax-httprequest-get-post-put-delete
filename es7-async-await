// // function test(data){

// //     return new Promise ((resolve,reject)=>resolve(data)) 
// // }
// // console.log(test("merhaba"))
// // buradaki işlemi async kolaylaştırarak aşağıdaki biçimi alır

// //promisleri daha kolay kullanmamızı sağlayacak
// async function test(data){ // async fonksiyonumuzun bize promis döneceğini belirtir.
//     // return data
//      let promise= new Promise((resolve,reject)=>{
//         setTimeout(()=>{
//             resolve("Bu bir Değerdir")
//         ,5000})

//      })
//      let response = await promise // resolveden gelecek değeri bekler ve aşşağıdaki fonksiyonları bekletir.
//      return response

// }

// test("merhaba").then(response => console.log(response))

// //------------------------------------------------------------------


// async function testData(data){
//     let promise= new Promise((resolve,reject)=>{
//         setTimeout(() => {
//            if(typeof data === "string"){
//             resolve (data)
//            }else{
//             reject(new Error("Ltfen bir string değer giriniz"))
//            }
//         }, 5000);
//     })
//     const response =await promise
//     return response
// }
// testData("Thriller")
// .then(data=>console.log(data))
// .catch(err=>console.log(err))

//---------------------------------------------------------------------

// async function getCurrency(url){
//     const response = await fetch(url)    // response object
//     const data = await response.json()     // json object   
//     return(data)
// }
// getCurrency("https://api.binance.com/api/v3/avgPrice?symbol=BNBUSDT ")
// .then(response => console.log(response))

//----------------------------------------------------------------------

class Request{
    async get(url){
        const response = await fetch(url) // response objesi elde eder
        const data1 = await response.json()  // json objesi
        return data1
    }

    async post(url,data){
        const response = await fetch(url,{
            method : 'POST',
            body : JSON.stringify(data),
            headers :{
                "Content-type":"application/json; charset=UTF-8"
            }
            })// RESPONSE OBJESİ GELİR
        const data2 = await response.json()
        return data2
    }

    async put(url,data){
        const response = await fetch(url,{
            method : 'PUT',
            body : JSON.stringify(data),
            headers :{
                "Content-type":"application/json; charset=UTF-8"
            }
        })// response objesi döner
        const data3 = await response.json()
        return data3
    }

    async delete (url){
        const response = await fetch("https://jsonplaceholder.typicode.com/albums/1",{
            method: 'DELETE'
        })// response objesi
        
        return "Veri Silme İşlemi Başarılı"
    }

}
const request = new Request()
// request.get("https://jsonplaceholder.typicode.com/albums")
// .then(albums => console.log(albums))
// .catch(err =>console.log(err))


// request.post("https://jsonplaceholder.typicode.com/albums",{userId:1,title:"deneme"})
// .then(albums => console.log(albums))
// .catch(err =>console.log(err))

// request.put("https://jsonplaceholder.typicode.com/albums/10",{userId:143,title:"Değişen-Bilgi"})
// .then(albums => console.log(albums))
// .catch(err =>console.log(err))

// request.delete("https://jsonplaceholder.typicode.com/albums/10")
// .then(label => console.log(label))
// .catch(err =>console.log(err))
